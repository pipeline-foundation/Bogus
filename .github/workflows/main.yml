name: Bogus Action

on: [push]

jobs:
  
  init:
    
    runs-on: windows-latest
    
    steps:
 
    - name: Checkout repository
      uses: actions/checkout@v2


#    - name: Initialize CodeQL
#      uses: github/codeql-action/init@v1 

 
#    - name: Cache SonarCloud packages
#     uses: actions/cache@v1
#      with:
#        path: ~\sonar\cache
#        key: ${{ runner.os }}-sonar 
#        restore-keys: ${{ runner.os }}-sonar
    
#    - name: Cache SonarCloud scanner
#      id: cache-sonar-scanner
#      uses: actions/cache@v1
#     with:
#      path: .\.sonar\scanner
#       key: ${{ runner.os }}-sonar-scanner
#       restore-keys: ${{ runner.os }}-sonar-scanner
     
#    - name: Install SonarCloud scanner
#      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#      shell: powershell
#      run: |
#      New-Item -Path .\.sonar\scanner -ItemType Directory
#      dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    
 #   - name: SonarScanner begin
 #     env:
 #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
 #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
 #     shell: powershell
 #     run: .\.sonar\scanner\dotnet-sonarscanner begin /k:"szlatkow_Bogus" /o:"szlatkow" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
    
 #   - name: Upload Artifacts on root folder
 #     uses: actions/upload-artifact@v2
 #     with:
 #       name: Source
 #       path: ./

    - name: Restore dotnet tools    
      run: dotnet tool restore
    
    - name: Build fakes
      run: dotnet fake run Source\Builder\build.fsx target ci
      env: 
       FORCE_VERSION: 4.0.0 
    
    - name: Run test's
      run: |
       cd Source\Bogus.Tests\
       dotnet add package  XunitXml.TestLogger --version 2.1.26
       dotnet test --logger:xunit

    - name: Upload Artifacts on packages
      uses: actions/upload-artifact@v2
      with:
        name: Test results publish
        path: /Source/Bogus.Tests/TestResults/*.xml


#    - name: Perform CodeQL Analysis
#      uses: github/codeql-action/analyze@v1
    
 
#    - name: SonarScanner end
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#      run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
         
         
#    - name: publish on version change
#      id: publish_nuget
#      uses: rohith/publish-nuget@v2
#      continue-on-error: true
#      with:
#          PROJECT_FILE_PATH: 'Source/Bogus/Bogus.csproj'
#          TAG_COMMIT: true
#          NUGET_KEY: ${{secrets.API_KEY}}
#          PACKAGE_NAME: Fake-package-01
    
#    - name: Upload Artifacts on packages
#      uses: actions/upload-artifact@v2
#      with:
#        name: Package
#        path: __package/    
    

          # Run ubuntu init !

  release:
    needs: init
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    

#    - name: Checkout repository
#      uses: actions/checkout@v2
    
#    - uses: actions/download-artifact@v2
#      with:
#        name: Package
#        path: __package/    
    
    
    
    
    # Tag generator , Create release , Add asset.
    
    
    
#    - name: Bump version and push tag
#      id: tag_generator
#      uses: ChloePlanet/github-tag-action@master
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        WITH_V: true
    
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ steps.tag_generator.outputs.new_tag }} 
#        release_name: Release ${{ steps.tag_generator.outputs.new_tag }} 
#        body: These are the changes for the release
#        draft: false
#        prerelease: false

#    - name: Upload Release Asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#        asset_path: __package/Bogus.zip
#        asset_name: Bogus.zip
#        asset_content_type: application/zip


#    - name: Upload Release Asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#        asset_path: __package/Bogus.4.0.0.snupkg
#        asset_name: Bogus-${{ steps.tag_generator.outputs.new_tag }}-.snupkg
#        asset_content_type: application/snupkg



#    - name: Upload Release Asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#        asset_path: __package/Bogus.4.0.0.nupkg
#        asset_name: Bogus-${{ steps.tag_generator.outputs.new_tag }}-.nupkg
#        asset_content_type: application/nupkg
